---
- name: Install Redis
  package:
    name: "{{ package }}"
    state: present
  with_items: "{{ redis_packages }}"
  loop_control:
    loop_var: package
  register: _install_redis
  until: _install_redis is success
  retries: 3
  delay: 2

- name: Ensure Redis is started and enabled on boot
  service:
    name: redis
    state: started
    enabled: yes

- name: Install MariaDB
  package:
    name: "{{ package }}"
    state: present
  with_items: "{{ mariadb_packages }}"
  loop_control:
    loop_var: package
  register: _install_mariadb
  until: _install_mariadb is success
  retries: 3
  delay: 2

- name: Ensure MariaDB is started and enabled on boot
  service:
    name: mariadb
    state: started
    enabled: yes

- name: Check if MariaDB root password is set
  shell: mysqladmin -u root status
  changed_when: false
  failed_when: false
  register: _is_root_pwd_set

- name: Set MariaDB root password for the first time (root@localhost)
  mysql_user:
    name: root
    password: "{{ mariadb_root_password }}"
    host: localhost
    state: present
  when: _is_root_pwd_set.rc == 0

- name: Set MariaDB root password for 127.0.0.1, ::1
  mysql_user:
    name: root
    password: "{{ mariadb_root_password }}"
    host: "{{ host }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present
  with_items:
    - ::1
    - 127.0.0.1
  loop_control:
    loop_var: host

- name: Disallow root login remotely
  command: mysql -u root -p{{ mariadb_root_password }} -NBe
    "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
  changed_when: false

- name: Remove anonymous users
  mysql_user:
    name: ''
    host_all: true
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: absent

- name: Remove the test database
  mysql_db:
    name: test
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: absent

- name: Create Jumpserver database
  mysql_db:
    name: "{{ jumpserver_db_name }}"
    collation: 'utf8_general_ci'
    encoding: 'utf8'
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present

- name: Create Jumpserver user
  mysql_user:
    name: "{{ jumpserver_db_user }}"
    password: "{{ jumpserver_db_password }}"
    host: 127.0.0.1
    priv: "{{ jumpserver_db_name }}.*:ALL"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    state: present

- name: Install Python3
  package:
    name: "{{ package }}"
    state: present
  with_items: "{{ python3_packages }}"
  loop_control:
    loop_var: package
  register: _install_python3
  until: _install_python3 is success
  retries: 3
  delay: 2

- name: Clone Jumpserver repo (need several minutes)
  git:
    repo: https://github.com/jumpserver/jumpserver.git
    dest: "{{ jumpserver_install_path }}"
    depth: 1
    update: no

- name: Get Jumpserver dependencies
  shell: >
    cat "{{ jumpserver_install_path }}/requirements/{% if ansible_pkg_mgr == 'yum' %}rpm{%elif
    ansible_pkg_mgr == 'apt' %}deb{% endif %}_requirements.txt"
  register: _jumpserver_dependencies
  changed_when: false

- name: Install Jumpserver dependencies
  package:
    name: "{{ package }}"
    state: present
  register: _install_dep_packages
  until: _install_dep_packages is success
  retries: 3
  delay: 2
  with_items: "{{ _jumpserver_dependencies.stdout.split() }}"
  loop_control:
    loop_var: package

- name: Install Jumpserver python requirements in a virtualenv
  pip:
    requirements: "{{ jumpserver_install_path }}/requirements/requirements.txt"
    virtualenv: "{{ jumpserver_virtualenv_path }}"
    virtualenv_command: virtualenv-3
  register: _install_python_requirements
  until: _install_python_requirements is success
  retries: 3
  delay: 2